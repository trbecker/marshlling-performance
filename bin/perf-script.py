# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-script-python Documentation for the list of available functions.

from __future__ import print_function

import os
import sys
import dateutil

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
	'/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *

encode_start=0
decode_start=0

encode_times=[]
decode_times=[]

def trace_begin():
    pass

def trace_end():
    for enc, dec in zip(encode_times, decode_times):
        print(f'{enc} {dec}')

def probe_test__encode(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, perf_sample_dict):

    global encode_start
    encode_start=(common_secs * 1000000000) + common_nsecs

def probe_test__encode__return(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_func, __probe_ret_ip, perf_sample_dict):

    global encode_times
    now=common_secs * 1000000000 + common_nsecs
    encode_times.append((now - encode_start) / 1000000.0)

def probe_test__decode(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_ip, perf_sample_dict):

    global decode_start
    decode_start=(common_secs * 1000000000) + common_nsecs

def probe_test__decode__return(event_name, context, common_cpu,
    common_secs, common_nsecs, common_pid, common_comm,
    common_callchain, __probe_func, __probe_ret_ip, perf_sample_dict):

    global decode_times
    now=common_secs * 1000000000 + common_nsecs
    decode_times.append((now - decode_start) / 1000000.0)

def trace_unhandled(event_name, context, event_fields_dict, perf_sample_dict):
    pass

def print_header(event_name, cpu, secs, nsecs, pid, comm):
    pass

def get_dict_as_string(a_dict, delimiter=' '):
    pass
